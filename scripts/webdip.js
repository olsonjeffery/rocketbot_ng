// Generated by CoffeeScript 1.3.3
(function() {
  var jsdom, models, scrape, webdip_data_by_short_name, webdip_dip_plugin, webdip_dipcop_plugin, webdip_game_init, webdip_game_initialized, webdip_newdip_plugin, webdip_rmdip_plugin, webdip_url, _;

  _ = require('underscore');

  jsdom = require('jsdom');

  scrape = require('../scrape');

  models = {};

  webdip_game_initialized = false;

  webdip_game_init = function(db) {
    webdip_game_initialized = true;
    models.webdip_game = db.sequelize.define('webdip_game', {
      id: {
        type: db.Sql.INTEGER,
        autoIncrement: true,
        allowNull: false
      },
      game_id: db.Sql.STRING,
      short_name: db.Sql.STRING
    }, {
      classMethods: {
        by_short_name: function(short_name, cb) {
          return this.find({
            where: {
              short_name: short_name
            }
          }).success(function(game) {
            return cb(game);
          });
        },
        by_game_id: function(game_id, cb) {
          return this.find({
            where: {
              game_id: game_id
            }
          }).success(function(game) {
            return cb(game);
          });
        }
      }
    });
    return models.webdip_game.sync();
  };

  webdip_url = "http://www.webdiplomacy.net/board.php?gameID=";

  webdip_newdip_plugin = (function() {

    function webdip_newdip_plugin(plg_ldr, options, db) {
      this.options = options;
      this.db = db;
      if (!webdip_game_initialized) {
        webdip_game_init(this.db);
      }
    }

    webdip_newdip_plugin.prototype.name = 'newdip';

    webdip_newdip_plugin.prototype.msg_type = 'message';

    webdip_newdip_plugin.prototype.version = '1';

    webdip_newdip_plugin.prototype.commands = ['newdip'];

    webdip_newdip_plugin.prototype.match_regex = function() {
      return null;
    };

    webdip_newdip_plugin.prototype.process = function(client, msg) {
      var game_id, game_url, inputs, self, short_name;
      inputs = msg.msg.split(' ');
      if (inputs.length !== 2) {
        return client.say(msg.reply, ("Sorry, '" + msg.msg + "' is not a valid input to ") + "start watching a web diplomacy game. the 'short name' for the game" + " needs to be a single word with no spaces.");
      } else {
        game_id = inputs[0], short_name = inputs[1];
        game_url = webdip_url + game_id;
        self = this;
        return models.webdip_game.by_short_name(short_name, function(g) {
          if (g != null) {
            return client.say(msg.reply, "Sorry, there's already a game called " + ("" + short_name + "."));
          } else {
            return models.webdip_game.by_game_id(game_id, function(g2) {
              if (g2 != null) {
                return client.say(msg.reply, "Sorry, I'm already following web " + ("diplomacy game #" + game_id + "."));
              } else {
                return scrape.single(game_url, function(body, window) {
                  var $, game_name, valid_game;
                  $ = require('jquery').create(window);
                  valid_game = $('span.gameName').length === 1;
                  if (valid_game) {
                    game_name = $('span.gameName').text();
                    models.webdip_game.create({
                      game_id: game_id,
                      short_name: short_name
                    });
                    console.log("after creating new webdip_game entry for" + (" " + game_id));
                    return client.say(msg.reply, "Okay! I'm now following " + ("" + game_name + ". You") + " can check its current status, at any time, by " + ("typing '" + self.options.cmd_prefix + "webdip ") + ("" + short_name + "'."));
                  } else {
                    return client.say(msg.reply, "Sorry, it appears that there" + " isn't a game at www.webdiplomacy.net with an id " + ("matching " + game_id));
                  }
                });
              }
            });
          }
        });
      }
    };

    return webdip_newdip_plugin;

  })();

  webdip_rmdip_plugin = (function() {

    function webdip_rmdip_plugin(plg_ldr, options, db) {
      this.options = options;
      this.db = db;
      if (!webdip_game_initialized) {
        webdip_game_init(this.db);
      }
    }

    webdip_rmdip_plugin.prototype.name = 'rmdip';

    webdip_rmdip_plugin.prototype.msg_type = 'message';

    webdip_rmdip_plugin.prototype.version = '1';

    webdip_rmdip_plugin.prototype.commands = ['rmdip'];

    webdip_rmdip_plugin.prototype.match_regex = function() {
      return null;
    };

    webdip_rmdip_plugin.prototype.process = function(client, msg) {
      var short_name;
      short_name = msg.msg;
      return models.webdip_game.by_short_name(short_name, function(g) {
        if (g != null) {
          g.destroy();
          return client.say(msg.reply, "Alright, I'm no longer following " + ("" + short_name + "."));
        } else {
          return client.say(msg.reply, "Sorry, I'm not tracking any diplomacy games" + (" named " + short_name + "."));
        }
      });
    };

    return webdip_rmdip_plugin;

  })();

  webdip_data_by_short_name = function(client, msg, short_name, cb) {
    if (short_name === '') {
      models.webdip_game.all().success(function(games) {
        var names;
        names = (_.map(games, function(g) {
          return g.short_name;
        })).join(', ');
        if (games.length === 1) {
          return webdip_data_by_short_name(client, msg, games.first().short_name, cb);
        } else {
          return client.say(msg.reply, "Diplomacy games that I'm following: " + names);
        }
      });
      return null;
    }
    return models.webdip_game.by_short_name(short_name, function(g) {
      var game_url;
      if (g != null) {
        game_url = webdip_url + g.game_id;
        return scrape.single(game_url, function(body, window) {
          var $, game_date, game_name, game_phase, iterator, player_data, time_remaining, valid_game;
          $ = require('jquery').create(window);
          valid_game = $('span.gameName').length === 1;
          if (valid_game) {
            game_name = $('span.gameName').text();
            game_date = $('span.gameDate').text();
            game_phase = $('span.gamePhase').text();
            time_remaining = $('span.timeremaining').text();
            iterator = function(e) {
              var country_name, member_row, player_name, sc_count, status, status_alt, unit_count, worth;
              member_row = $(e);
              status_alt = member_row.find('.memberCountryName img').attr('alt');
              status = status_alt === 'Ready' ? 'Orders Ready' : status_alt === 'Completed' ? 'Orders Saved' : !(status_alt != null) ? 'No Move' : 'No Orders';
              country_name = $(member_row.find('.memberCountryName span')[1]).text();
              player_name = member_row.find('span.memberName a').text();
              sc_count = $(member_row.find('span.memberSCCount em')[0]).text();
              unit_count = $(member_row.find('span.memberSCCount em')[1]).text();
              worth = $(member_row.find('span.memberPointsCount em')[1]).text();
              return {
                status: status,
                country_name: country_name,
                player_name: player_name,
                sc_count: sc_count,
                unit_count: unit_count,
                worth: worth
              };
            };
            player_data = _.map($('tr.member'), iterator);
            console.log("about to invoke webdip callback..");
            return cb({
              game_name: game_name,
              game_date: game_date,
              game_phase: game_phase,
              time_remaining: time_remaining,
              player_data: player_data
            });
          } else {
            return client.say(msg.reply, ("It appears that " + short_name + " is no ") + "an active game on www.webdiplomacy.net. Did the game end " + "or get deleted?");
          }
        });
      } else {
        return client.say(msg.reply, "Sorry, I'm not tracking any diplomacy games" + (" named " + short_name + "."));
      }
    });
  };

  webdip_dipcop_plugin = (function() {

    function webdip_dipcop_plugin(plg_ldr, options, db) {
      this.options = options;
      this.db = db;
      if (!webdip_game_initialized) {
        webdip_game_init(this.db);
      }
    }

    webdip_dipcop_plugin.prototype.name = 'dipcop';

    webdip_dipcop_plugin.prototype.msg_type = 'message';

    webdip_dipcop_plugin.prototype.version = '1';

    webdip_dipcop_plugin.prototype.commands = ['dipcop'];

    webdip_dipcop_plugin.prototype.match_regex = function() {
      return null;
    };

    webdip_dipcop_plugin.prototype.process = function(client, msg) {
      var short_name;
      short_name = msg.msg;
      return webdip_data_by_short_name(client, msg, short_name, function(data) {
        var dirtbags, player_list, scum_arr;
        console.log("short_name: '" + data.short_name + "'");
        dirtbags = _.filter(data.player_data, function(pd) {
          return pd.status !== "Orders Ready" && pd.status !== "No Move";
        });
        scum_arr = [];
        _.each(dirtbags, function(pd) {
          return scum_arr.push("" + pd.country_name + ": " + pd.status);
        });
        player_list = scum_arr.join(', ');
        return client.say(msg.reply, "Degenerate scum of " + data.game_name + ": " + player_list);
      });
    };

    return webdip_dipcop_plugin;

  })();

  webdip_dip_plugin = (function() {

    function webdip_dip_plugin(plg_ldr, options, db) {
      this.options = options;
      this.db = db;
      if (!webdip_game_initialized) {
        webdip_game_init(this.db);
      }
    }

    webdip_dip_plugin.prototype.name = 'dip';

    webdip_dip_plugin.prototype.msg_type = 'message';

    webdip_dip_plugin.prototype.version = '1';

    webdip_dip_plugin.prototype.commands = ['dip'];

    webdip_dip_plugin.prototype.match_regex = function() {
      return null;
    };

    webdip_dip_plugin.prototype.process = function(client, msg) {
      var short_name;
      short_name = msg.msg;
      return webdip_data_by_short_name(client, msg, short_name, function(data) {
        var iterator;
        console.log("short_name: '" + data.short_name + "'");
        client.say(msg.reply, ("" + data.game_name + " - " + data.game_date + ", ") + ("" + data.game_phase + " - Next: " + data.time_remaining + " || ") + "Player Statuses:");
        iterator = function(pd) {
          return client.say(msg.reply, ("<" + pd.player_name + "> " + pd.country_name + " -- ") + ("" + pd.status + " SC: " + pd.sc_count + " U: " + pd.unit_count + " ") + ("W: " + pd.worth));
        };
        return _.each(data.player_data, iterator);
      });
    };

    return webdip_dip_plugin;

  })();

  module.exports = {
    plugins: [webdip_newdip_plugin, webdip_rmdip_plugin, webdip_dip_plugin, webdip_dipcop_plugin],
    models: models
  };

}).call(this);
