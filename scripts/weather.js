// Generated by CoffeeScript 1.3.3
(function() {
  var after_ud_check, do_weather_lookup, parser, scrape, user_data, weather_plugin, xml2js, _;

  xml2js = require('xml2js');

  _ = require('underscore');

  user_data = require('./user_data');

  scrape = require('../scrape');

  parser = new xml2js.Parser();

  do_weather_lookup = function(client, msg, loc) {
    var url;
    url = "http://www.google.com/ig/api?weather=" + loc;
    console.log("weather lookup for " + url);
    return scrape.single(url, function(body, window) {
      return parser.parseString(body, function(err, result) {
        var condition, first, forecast, found_weather, humidity, temp, temp_c, wind;
        found_weather = result.weather.forecast_information != null;
        if (found_weather) {
          if (msg.command === 'weather') {
            loc = result.weather.forecast_information.city['@'].data;
            condition = result.weather.current_conditions.condition['@'].data;
            temp = result.weather.current_conditions.temp_f['@'].data;
            temp_c = result.weather.current_conditions.temp_c['@'].data;
            humidity = result.weather.current_conditions.humidity['@'].data;
            wind = result.weather.current_conditions.wind_condition['@'].data;
            client.say(msg.reply, "Weather for " + loc + ":");
            client.say(msg.reply, ("Condition: " + condition + " ") + ("Temp: " + temp + "F (" + temp_c + "C)"));
            return client.say(msg.reply, "" + humidity + " " + wind);
          } else {
            loc = result.weather.forecast_information.city['@'].data;
            client.say(msg.reply, "Forecast for " + loc + ":");
            first = true;
            forecast = _.map(result.weather.forecast_conditions, function(fc) {
              var day, high, low;
              day = first ? (first = false, "Today") : fc.day_of_week['@'].data;
              high = fc.high['@'].data;
              low = fc.low['@'].data;
              condition = fc.condition['@'].data;
              return ("" + day + " - Condition: " + condition + " High/Low: ") + ("" + high + "F/" + low + "F");
            });
            console.log("forecast len " + forecast.length);
            return _.each(forecast, function(f) {
              console.log(f);
              return client.say(msg.reply, f);
            });
          }
        } else {
          return client.say(msg.reply, "Unable to find weather information" + (" for '" + loc + "'"));
        }
      });
    });
  };

  after_ud_check = function(client, msg, ud, loc) {
    var found_loc;
    if (loc === '') {
      if ((ud.weather_loc != null) && ud.weather_loc !== '') {
        loc = ud.weather_loc;
        found_loc = true;
      }
    } else {
      ud.weather_loc = loc;
      ud.save();
      found_loc = true;
    }
    if (found_loc) {
      return do_weather_lookup(client, msg, loc);
    } else {
      return client.say(msg.reply, "Sorry, you need to provide a location" + " to lookup weather for.");
    }
  };

  weather_plugin = (function() {

    function weather_plugin(plg_ldr, options) {}

    weather_plugin.prototype.name = 'weather';

    weather_plugin.prototype.msg_type = 'message';

    weather_plugin.prototype.version = '1';

    weather_plugin.prototype.commands = ['weather', 'forecast'];

    weather_plugin.prototype.match_regex = function() {
      return null;
    };

    weather_plugin.prototype.process = function(client, msg) {
      var found_loc, loc;
      loc = msg.msg.compact();
      found_loc = false;
      return user_data.models.user_data.by_nick(msg.sending_nick, function(ud) {
        if (!(ud != null)) {
          ud = user_data.models.user_data.new_ud(msg.sending_nick);
          return ud.save().success(function() {
            return after_ud_check(client, msg, ud, loc);
          });
        } else {
          return after_ud_check(client, msg, ud, loc);
        }
      });
    };

    return weather_plugin;

  })();

  module.exports = {
    plugins: [weather_plugin]
  };

}).call(this);
