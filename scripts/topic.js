// Generated by CoffeeScript 1.3.3
(function() {
  var models, recent_topics_plugin, topic_info_init, topic_info_initialized, topic_logger_plugin, topic_plugin, _;

  _ = require('underscore');

  models = {};

  topic_info_initialized = false;

  topic_info_init = function(db) {
    topic_info_initialized = true;
    models.topic_info = db.sequelize.define('topic_info', {
      id: {
        type: db.Sql.INTEGER,
        autoIncrement: true,
        allowNull: false
      },
      nick: db.Sql.STRING,
      chan: db.Sql.STRING,
      topic: db.Sql.STRING
    }, {
      classMethods: {
        recent_by_nick: function(chan, nick, cb) {
          return this.findAll({
            limit: 5,
            order: 'createdAt DESC',
            where: {
              nick: nick,
              chan: chan
            }
          }).success(function(entries) {
            return cb(entries);
          });
        },
        recent: function(chan, cb) {
          return this.findAll({
            limit: 5,
            order: 'createdAt DESC',
            where: {
              chan: chan
            }
          }).success(function(entries) {
            return cb(entries);
          });
        },
        by_topic: function(topic, cb) {
          return this.find({
            where: {
              topic: topic
            }
          }).success(function(entry) {
            return cb(entry);
          });
        }
      }
    });
    return models.topic_info.sync();
  };

  topic_logger_plugin = (function() {

    function topic_logger_plugin(plg_ldr, options, db) {
      this.options = options;
      this.db = db;
      if (!topic_info_initialized) {
        topic_info_init(this.db);
      }
    }

    topic_logger_plugin.prototype.name = 'topic logger';

    topic_logger_plugin.prototype.msg_type = 'topic';

    topic_logger_plugin.prototype.version = '1';

    topic_logger_plugin.prototype.commands = [];

    topic_logger_plugin.prototype.match_regex = function() {
      return /^.*$/;
    };

    topic_logger_plugin.prototype.process = function(client, msg) {
      var new_topic, topic_nick,
        _this = this;
      console.log("topic_logger process...");
      new_topic = msg.topic;
      topic_nick = msg.nick.split('!')[0].compact();
      return models.topic_info.by_topic(new_topic, function(t) {
        if (((t != null) && t.nick === topic_nick) || topic_nick === _this.options.nick) {
          return console.log("topic already exists or bot topic...");
        } else {
          return models.topic_info.create({
            nick: topic_nick,
            chan: msg.chan,
            topic: new_topic
          });
        }
      });
    };

    return topic_logger_plugin;

  })();

  topic_plugin = (function() {

    function topic_plugin(plg_ldr, options, db) {
      this.db = db;
      if (!topic_info_initialized) {
        topic_info_init(this.db);
      }
    }

    topic_plugin.prototype.name = 'topic';

    topic_plugin.prototype.msg_type = 'message';

    topic_plugin.prototype.version = '1';

    topic_plugin.prototype.commands = ['topic'];

    topic_plugin.prototype.match_regex = function() {
      return null;
    };

    topic_plugin.prototype.process = function(client, msg) {
      var new_topic;
      if (msg.reply === msg.sending_nick) {
        client.say(msg.reply, "Sorry, dude. You can only change the topic " + "in channel.");
        return null;
      }
      new_topic = msg.msg.compact();
      if (new_topic === '') {
        client.say(msg.reply, "Sorry, I need a valid message to change the " + "topic to.");
        return null;
      }
      return models.topic_info.create({
        nick: msg.sending_nick.compact(),
        chan: msg.reply,
        topic: new_topic
      }).success(function() {
        return client.send("TOPIC", msg.reply, new_topic);
      });
    };

    return topic_plugin;

  })();

  recent_topics_plugin = (function() {

    function recent_topics_plugin(plg_ldr, options, db) {
      this.db = db;
      if (!topic_info_initialized) {
        topic_info_init(this.db);
      }
    }

    recent_topics_plugin.prototype.name = 'recent topics';

    recent_topics_plugin.prototype.msg_type = 'message';

    recent_topics_plugin.prototype.version = '1';

    recent_topics_plugin.prototype.commands = ['topics'];

    recent_topics_plugin.prototype.match_regex = function() {
      return null;
    };

    recent_topics_plugin.prototype.process = function(client, msg) {
      var nick;
      if (msg.reply === msg.sending_nick) {
        client.say(msg.reply, "Sorry, only works in chan.");
        return null;
      }
      if (msg.msg === '') {
        return models.topic_info.recent(msg.reply, function(topics) {
          if (topics != null) {
            client.say(msg.reply, "Recent topics:");
            return _.each(topics, function(t) {
              return client.say(msg.reply, ("<" + t.nick + "> " + (t.createdAt.relative()) + " ") + ("- \"" + t.topic + "\""));
            });
          } else {
            return client.say(msg.reply, "No topics logged.");
          }
        });
      } else {
        nick = msg.msg.compact();
        return models.topic_info.recent_by_nick(msg.reply, nick, function(topics) {
          if (topics != null) {
            client.say(msg.reply, "Recent topics from " + nick + ":");
            return _.each(topics, function(t) {
              return client.say(msg.reply, ("" + (t.createdAt.relative()) + " - ") + ("\"" + t.topic + "\""));
            });
          } else {
            return client.say(msg.reply, "Sorry, no topic changes from " + nick + ".");
          }
        });
      }
    };

    return recent_topics_plugin;

  })();

  module.exports = {
    models: models,
    plugins: [topic_plugin, topic_logger_plugin, recent_topics_plugin]
  };

}).call(this);
